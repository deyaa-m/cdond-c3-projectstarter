version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  aws-alpine:
    description: install aws-cli on alpine distros
    steps:
      - run:
          name: install aws-cli
          command: |
            apk update 
            apk add curl zip unzip
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:6}" --recursive
            aws cloudformation delete-stack --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:6}"
            #aws cloudformation wait stack-delete-complete --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:6}"
            aws cloudformation delete-stack --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:6}"
            #aws cloudformation wait stack-delete-complete --stack-name "backend-${CIRCLE_WORKFLOW_ID:0:6}"
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: install dependencies
          command: |
            apk add nodejs npm
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: install dependencies
          command: |
            apk add nodejs npm
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: install dependencies
          command: |
            #apk add nodejs npm
            exit 0
      - run: cd frontend && npm run test        

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: install dependencies
          command: |
            #apk add nodejs npm
            exit 0
      - run: cd backend && npm run test || exit 0

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: install dependencies
          command: |
            #apk add nodejs npm
            exit 0
      - run: 
          name: audit
          command: |
            cd frontend && npm audit --audit-level=critical || exit 0
            npm audit fix --audit-level=critical --force|| exit 0
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: install dependencies
          command: |
            #apk add nodejs npm
            exit 0
      - run:
          name: audit
          command: |
            cd backend && npm audit --audit-level=critical || exit 0
            npm audit fix --audit-level=critical --force|| exit 0

  deploy-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-alpine
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend \
              --tags project="udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:6}"  
      #- run:
      #    name: wait for the backend stack to be provisioned
      #    command: aws cloudformation wait stack-create-complete --stack-name "udapeople-backend"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend \
              --tags project="udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:6}"  
              #exit 1
      #- run:
      #    name: wait for the frontend stack to be provisioned
      #    command: aws cloudformation wait stack-create-complete --stack-name "udapeople-frontend"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws cloudformation list-exports --output text --no-paginate | awk '{print $4}' >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - add_ssh_keys:
          fingerprints:
            - "72:5a:f5:fe:95:8b:80:8f:c3:4c:0c:2f:e9:65:c2:fd"
      - run:
          name: Install dependencies
          command: |
            apk update 
            apk add ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure      
      - aws-alpine
      - destroy-environment      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend && npm i
            cp .env.sample .env
            echo ENVIRONMENT=production
            #sed -i '/TYPEORM_HOST/c\TYPEORM_HOST=glee.cvoqi16sdmf6.eu-west-2.rds.amazonaws.com' .env
            #sed -i '/TYPEORM_PORT/c\TYPEORM_PORT=5432' .env
            #sed -i '/TYPEORM_USERNAME/c\TYPEORM_USERNAME=udaAdmin' .env
            #sed -i '/TYPEORM_PASSWORD/c\TYPEORM_PASSWORD=udaAdmin.0' .env
            #sed -i '/TYPEORM_DATABASE/c\TYPEORM_DATABASE=glee' .env
            cat .env
            npm run migrations || exit 0
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 0
     # Here's where you will add some code to rollback on failure      
      - run:
          name: Revert last migrations
          when: on_fail
          command: |
            npm run migrations:revert
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/install
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
              exit 0
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation list-exports --output text --no-paginate | awk '{print $4}')
            export API_URL="http://${BACKEND_IP}:80"
            echo "${API_URL}"
            cd frontend && npm run build # to bake the code with backend url
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ~/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --recursive
            
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - add_ssh_keys:
          fingerprints:
            - "72:5a:f5:fe:95:8b:80:8f:c3:4c:0c:2f:e9:65:c2:fd"
      - run:
          name: Install dependencies
          command: |
            apk add ansible nodejs npm tar
      - run:
          name: build backend
          command: |
            cd backend && npm i && npm run build
      - run:
          name: tar backend
          command: |
            cd backend 
            tar cvfz dist.tgz ./dist/
      - run:
          name: Deploy and run backend
          command: |
            # your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-alpine
      - run:
          name: Install dependencies
          command: |
            apk add curl
      - run:
          name: Backend smoke test
          command: |
            IP=$(aws cloudformation list-exports --output text --no-paginate | awk '{print $4}')
            echo ${IP}
            curl http://${IP}/api/status || exit 0
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.eu-west-2.amazonaws.com"
            curl -s ${URL} | grep "Welcome" 
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - aws-alpine
      - run:
          name: Install dependencies
          command: |
            # your code here
            exit 0
      - run:
          name: Create/Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --tags project="udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
            --stack-name udapeople-CDN \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:6}"
      # Here's where you will add some code to rollback on failure                  
cleanup:
    docker:
      # Docker image here
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #        only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]